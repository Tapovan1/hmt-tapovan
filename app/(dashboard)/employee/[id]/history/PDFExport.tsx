"use client";

import { Button } from "@/components/ui/button";
import { formatIndianTime } from "@/lib/utils/date-format";
import { Download } from "lucide-react";
import { useState } from "react";

interface AttendanceRecord {
  id: string;
  date: string;
  checkIn: string | null;
  checkOut: string | null;
  status: string | null;
  late: number;
  early: number | null;
}

interface HistoryRecord {
  date: Date;
  type: "WORKING" | "SUNDAY" | "HOLIDAY";
  holidayName?: string;
  attendance?: AttendanceRecord;
}

interface PDFExportProps {
  records: HistoryRecord[];
  employeeName: string;
  month?: number;
  year?: number;
}

export function PDFExport({
  records,
  employeeName,
  month,
  year,
}: PDFExportProps) {
  const [isExporting, setIsExporting] = useState(false);

  const exportToPDF = async () => {
    setIsExporting(true);

    try {
      const jsPDF = (await import("jspdf")).default;
      const autoTable = (await import("jspdf-autotable")).default;

      const doc = new jsPDF("p", "mm", "a4");

      doc.setFontSize(18);
      doc.setTextColor(44, 62, 80);
      doc.text("Attendance Report", 105, 20, { align: "center" });

      doc.setFontSize(11);
      doc.setTextColor(100, 100, 100);
      doc.text(`Employee: ${employeeName}`, 20, 35);

      const dateRange =
        month && year
          ? `${new Date(year, month - 1).toLocaleDateString("en-US", {
              month: "long",
              year: "numeric",
            })}`
          : "All Records";
      doc.text(`Period: ${dateRange}`, 20, 42);
      doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 49);

      doc.setDrawColor(200, 200, 200);
      doc.line(20, 55, 190, 55);

      const tableData = records.map((rec) => {
        const dateStr = new Date(rec.date).toLocaleDateString("en-US", {
          year: "numeric",
          month: "short",
          day: "numeric",
        });

        if (rec.type === "SUNDAY") {
          return [dateStr, "-", "-", "Sunday", "-", "-"];
        }

        if (rec.type === "HOLIDAY") {
          return [dateStr, "-", "-", `Holiday (${rec.holidayName})`, "-", "-"];
        }

        if (rec.type === "WORKING" && rec.attendance) {
          const a = rec.attendance;
          const statusLabel = a.status
            ? a.status === "ON_LEAVE"
              ? "On Leave"
              : a.status.charAt(0) + a.status.slice(1).toLowerCase()
            : "N/A";

          return [
            dateStr,
            a.checkIn ? formatIndianTime(a.checkIn) : "N/A",
            a.checkOut ? formatIndianTime(a.checkOut) : "N/A",
            statusLabel,
            a.late > 0 ? `${a.late} min` : "N/A",
            a.early !== null ? `${a.early} min` : "N/A",
          ];
        }

        return [dateStr, "-", "-", "N/A", "-", "-"];
      });

      autoTable(doc, {
        head: [
          [
            "Date",
            "Check In",
            "Check Out",
            "Status",
            "Late Minutes",
            "Early Exit",
          ],
        ],
        body: tableData,
        startY: 60,
        theme: "grid",
        tableWidth: "auto",
        styles: {
          fontSize: 9,
          cellPadding: 3,
          valign: "middle",
          overflow: "linebreak",
        },
        headStyles: {
          fillColor: [52, 152, 219],
          textColor: [255, 255, 255],
          fontStyle: "bold",
          halign: "center",
        },
        bodyStyles: {
          halign: "center",
        },
        alternateRowStyles: {
          fillColor: [245, 247, 250],
        },
        margin: { left: 10, right: 10 },
        didDrawPage: (data) => {
          const pageHeight = doc.internal.pageSize.height;
          doc.setFontSize(8);
          doc.setTextColor(150);
          doc.text(
            "Generated by Attendance Management System",
            10,
            pageHeight - 10
          );
          doc.text(
            `Page ${doc.internal.getNumberOfPages()}`,
            doc.internal.pageSize.width - 10,
            pageHeight - 10,
            { align: "right" }
          );
        },
      });

      const finalY = (doc as any).lastAutoTable.finalY + 15;
      doc.setFontSize(13);
      doc.setTextColor(44, 62, 80);
      doc.text("Summary Statistics", 20, finalY);

      doc.setFontSize(10);
      doc.setTextColor(0, 0, 0);

      const totalDays = records.length;
      const presentDays = records.filter(
        (r) => r.type === "WORKING" && r.attendance?.status === "PRESENT"
      ).length;
      const lateDays = records.filter(
        (r) => r.type === "WORKING" && r.attendance?.status === "LATE"
      ).length;
      const absentDays = records.filter(
        (r) => r.type === "WORKING" && r.attendance?.status === "ABSENT"
      ).length;
      const leaveDays = records.filter(
        (r) => r.type === "WORKING" && r.attendance?.status === "ON_LEAVE"
      ).length;
      const sundayCount = records.filter((r) => r.type === "SUNDAY").length;
      const holidayCount = records.filter((r) => r.type === "HOLIDAY").length;

      const totalLateMinutes = records.reduce(
        (sum, r) => sum + (r.attendance?.late || 0),
        0
      );
      const totalEarlyExit = records.reduce(
        (sum, r) => sum + (r.attendance?.early || 0),
        0
      );

      autoTable(doc, {
        startY: finalY + 5,
        theme: "plain",
        body: [
          [
            { content: `Total Days: ${totalDays}`, styles: { cellWidth: 60 } },
            { content: `Present: ${presentDays}`, styles: { cellWidth: 60 } },
            { content: `Absent: ${absentDays}`, styles: { cellWidth: 60 } },
          ],
          [
            { content: `Late Days: ${lateDays}` },
            { content: `On Leave: ${leaveDays}` },
            { content: `Sundays: ${sundayCount}` },
          ],
          [
            { content: `Holidays: ${holidayCount}` },
            { content: `Late Minutes: ${totalLateMinutes}` },
            { content: `Early Exits: ${totalEarlyExit}` },
          ],
        ],
        styles: { fontSize: 10, textColor: [80, 80, 80] },
      });

      const fileName = `${employeeName.replace(
        /\s+/g,
        "_"
      )}_Attendance_${dateRange.replace(/\s+/g, "_")}.pdf`;
      doc.save(fileName);
    } catch (error) {
      console.error("Error generating PDF:", error);
      alert("Error generating PDF. Please try again.");
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <Button
      onClick={exportToPDF}
      disabled={isExporting || records.length === 0}
      className="bg-green-600 hover:bg-green-700 text-white"
    >
      {isExporting ? (
        <>
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
          Generating...
        </>
      ) : (
        <>
          <Download className="mr-2 h-4 w-4" />
          Export PDF
        </>
      )}
    </Button>
  );
}
